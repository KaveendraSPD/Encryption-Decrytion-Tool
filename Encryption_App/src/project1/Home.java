/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project1;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Kaveendra S.P.D
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    //Declaring global variables
    //Variables used for jFrame movements
    int xMouse;
    int yMouse;
    //Variables used in Encryption key validation
    String pass1 = "";
    String pass2 = "";
    String pass3 = "";
    // String key1 ="";
    //String key2 ="";
    int count1 = 1;
    int count2 = 1;
    int count3 = 1;
    //Variables used in Encryption process
    String Choosertitle;
    public String savepath = "";
    String keysavepath = "";
    int numOfRows = 0;
    int asize = 0;
    int count = 0;

    public String KEY = "";
    public String DKey = "";

    public Home() {
        initComponents();
        decryptKey.setEnabled(false);
        Pass_1.setEnabled(false);
        Pass_2.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Home_Panel = new javax.swing.JPanel();
        Button_Exit = new javax.swing.JButton();
        Button_Minimize = new javax.swing.JButton();
        Button_OpenFolder = new javax.swing.JButton();
        Button_OpenFile = new javax.swing.JButton();
        Button_Save = new javax.swing.JButton();
        Button_KeyManag = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        Button_Encrypt = new javax.swing.JButton();
        Button_Decrypt = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        Pass_1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        Pass_2 = new javax.swing.JTextField();
        Button_AddKey = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        decryptKey = new javax.swing.JTextField();
        App_Name = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setOpacity(0.9F);
        setResizable(false);

        Home_Panel.setLayout(null);

        Button_Exit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Close Window_50px.png"))); // NOI18N
        Button_Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_ExitActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_Exit);
        Button_Exit.setBounds(530, 10, 40, 40);

        Button_Minimize.setBackground(new java.awt.Color(255, 255, 255));
        Button_Minimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Minimize Window_50px.png"))); // NOI18N
        Button_Minimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_MinimizeActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_Minimize);
        Button_Minimize.setBounds(480, 10, 40, 40);

        Button_OpenFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Folder_50px.png"))); // NOI18N
        Button_OpenFolder.setText("Select Folders");
        Button_OpenFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_OpenFolderActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_OpenFolder);
        Button_OpenFolder.setBounds(20, 70, 250, 60);

        Button_OpenFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Add File_50px.png"))); // NOI18N
        Button_OpenFile.setText("Select Files");
        Button_OpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_OpenFileActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_OpenFile);
        Button_OpenFile.setBounds(20, 150, 250, 60);

        Button_Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Save as_50px.png"))); // NOI18N
        Button_Save.setText("Encrypt/Decrypt save location");
        Button_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_SaveActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_Save);
        Button_Save.setBounds(320, 70, 240, 60);

        Button_KeyManag.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Key_50px.png"))); // NOI18N
        Button_KeyManag.setText("Save key");
        Button_KeyManag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_KeyManagActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_KeyManag);
        Button_KeyManag.setBounds(320, 150, 240, 60);

        jSeparator1.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator1.setForeground(new java.awt.Color(153, 153, 153));
        Home_Panel.add(jSeparator1);
        jSeparator1.setBounds(20, 60, 540, 2);

        jSeparator3.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator3.setForeground(new java.awt.Color(153, 153, 153));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        Home_Panel.add(jSeparator3);
        jSeparator3.setBounds(290, 530, 10, 200);

        Button_Encrypt.setIcon(new javax.swing.ImageIcon("D:\\SLIIT\\3rd Year 1st Semester\\SSS\\Projects\\Assignment_02\\Encrypter\\Project1\\icons\\Data Encryption_50px.png")); // NOI18N
        Button_Encrypt.setText("ENCRYPT");
        Button_Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_EncryptActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_Encrypt);
        Button_Encrypt.setBounds(80, 410, 160, 70);

        Button_Decrypt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Remove Key_50px.png"))); // NOI18N
        Button_Decrypt.setText("DECRYPT");
        Button_Decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_DecryptActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_Decrypt);
        Button_Decrypt.setBounds(330, 410, 160, 70);

        jSeparator4.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator4.setForeground(new java.awt.Color(153, 153, 153));
        Home_Panel.add(jSeparator4);
        jSeparator4.setBounds(20, 220, 540, 10);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Size", "Path", "Status"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        Home_Panel.add(jScrollPane1);
        jScrollPane1.setBounds(10, 250, 550, 110);

        jSeparator5.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator5.setForeground(new java.awt.Color(153, 153, 153));
        Home_Panel.add(jSeparator5);
        jSeparator5.setBounds(20, 390, 540, 10);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enter decryption key :");
        Home_Panel.add(jLabel3);
        jLabel3.setBounds(370, 520, 140, 30);

        Pass_1.setBackground(new java.awt.Color(0, 0, 0));
        Pass_1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Pass_1.setForeground(new java.awt.Color(255, 255, 255));
        Pass_1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Pass_1KeyReleased(evt);
            }
        });
        Home_Panel.add(Pass_1);
        Pass_1.setBounds(20, 550, 250, 30);

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Re-Enter encryption key :");
        Home_Panel.add(jLabel2);
        jLabel2.setBounds(20, 590, 160, 30);

        Pass_2.setBackground(new java.awt.Color(0, 0, 0));
        Pass_2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Pass_2.setForeground(new java.awt.Color(255, 255, 255));
        Pass_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Pass_2ActionPerformed(evt);
            }
        });
        Pass_2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                Pass_2KeyReleased(evt);
            }
        });
        Home_Panel.add(Pass_2);
        Pass_2.setBounds(20, 620, 250, 30);

        Button_AddKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/Add Key_50px.png"))); // NOI18N
        Button_AddKey.setText("ADD KEY");
        Button_AddKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_AddKeyActionPerformed(evt);
            }
        });
        Home_Panel.add(Button_AddKey);
        Button_AddKey.setBounds(80, 670, 160, 70);

        jSeparator6.setBackground(new java.awt.Color(153, 153, 153));
        jSeparator6.setForeground(new java.awt.Color(153, 153, 153));
        Home_Panel.add(jSeparator6);
        jSeparator6.setBounds(20, 510, 540, 10);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Enter encryption key :");
        Home_Panel.add(jLabel4);
        jLabel4.setBounds(20, 520, 140, 30);

        decryptKey.setBackground(new java.awt.Color(0, 0, 0));
        decryptKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        decryptKey.setForeground(new java.awt.Color(255, 255, 255));
        decryptKey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                decryptKeyKeyReleased(evt);
            }
        });
        Home_Panel.add(decryptKey);
        decryptKey.setBounds(310, 550, 250, 30);

        App_Name.setBackground(new java.awt.Color(0, 0, 0));
        App_Name.setFont(new java.awt.Font("Calisto MT", 1, 18)); // NOI18N
        App_Name.setForeground(new java.awt.Color(255, 51, 102));
        App_Name.setText("F I L E E N C R Y P T O R");
        Home_Panel.add(App_Name);
        App_Name.setBounds(170, 10, 300, 40);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/project1/dark-background-wallpaper-1.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
        });
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });
        Home_Panel.add(jLabel1);
        jLabel1.setBounds(0, 0, 576, 790);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Home_Panel, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Home_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(576, 789));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void Button_ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_ExitActionPerformed

        // Exit from application
        System.exit(0);
    }//GEN-LAST:event_Button_ExitActionPerformed

    private void Button_MinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_MinimizeActionPerformed

        // Minimized application
        setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_Button_MinimizeActionPerformed

    private void Button_OpenFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_OpenFolderActionPerformed

        //Select folders for Encrypt or De-crypt
        try {
            JFileChooser folderselect = new JFileChooser();
            folderselect.setDialogTitle(Choosertitle);
            folderselect.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            folderselect.setAcceptAllFileFilterUsed(false);

            if (folderselect.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File folder = folderselect.getSelectedFile();
                String folderpath = folder.getAbsolutePath();
                String foldername = folder.getName();
                String size = Long.toString(folder.length());
                String status = "";

                Pattern p = Pattern.compile("Encrypted");
                Matcher m = p.matcher(foldername);

                //Check the status of selected folders(encrypted or not)
                if (m.find()) {

                    status = "Encrypted";
                } else {

                    status = "Not Encrypted";
                }
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(new Object[]{foldername, size, folderpath, status});
            } else {

                System.out.println("No Selection ");
            }
        } catch (Exception e) {

        }


    }//GEN-LAST:event_Button_OpenFolderActionPerformed

    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged

        //customizing form movements
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();

        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_jLabel1MouseDragged

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed

        //customizing form movements
        xMouse = evt.getX();
        yMouse = evt.getY();

    }//GEN-LAST:event_jLabel1MousePressed

    private void Button_OpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_OpenFileActionPerformed

        // Select files for Encrypt or De-crypt
        try {
            JFileChooser fileselect = new JFileChooser();
            fileselect.showOpenDialog(null);
            File file = fileselect.getSelectedFile();
            String filepath = file.getAbsolutePath();
            String filename = file.getName();
            String size = Long.toString(file.length());
            String status = "";

            Pattern p = Pattern.compile("Encrypted");
            Matcher m = p.matcher(filename);

            //Check the status of selected folders(encrypted or not)
            if (m.find()) {

                status = "Encrypted";
            } else {

                status = "Not Encrypted";
            }
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.addRow(new Object[]{filename, size, filepath, status});
        } catch (Exception e) {

        }


    }//GEN-LAST:event_Button_OpenFileActionPerformed

    private void Button_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_SaveActionPerformed

        // Select location for save encrypt or decrypt data
        try {
            JFileChooser savefolder = new JFileChooser();

            savefolder.setDialogTitle(Choosertitle);
            savefolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            savefolder.setAcceptAllFileFilterUsed(false);

            if (savefolder.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File savelocation = savefolder.getSelectedFile();
                savepath = savelocation.getAbsolutePath();
                String foldername = savelocation.getName();
                System.out.println(savepath);
                JOptionPane.showMessageDialog(null, "Save location set to" + savepath);
            } else {
                JOptionPane.showMessageDialog(null, "Save location not set. ");
                System.out.println("Save location not set. ");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail to set save location. ");
            System.out.println("Fail to set save location. ");
        }
    }//GEN-LAST:event_Button_SaveActionPerformed

    private void Button_EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_EncryptActionPerformed

        // Encrypt selected files and folders
        numOfRows = jTable1.getRowCount();
     
        Pass_1.setEnabled(true);
        Pass_2.setEnabled(true);
        //check pre-conditions before the encryption process
        if (savepath.contentEquals("")) {

            JOptionPane.showMessageDialog(null, "Please set a save location first !!!");
        } else if (numOfRows == 0) {
            JOptionPane.showMessageDialog(null, "Please add 1 or more files to encrypt !!!");
        } else if (KEY == "") {
            JOptionPane.showMessageDialog(null, "Add a encryption key!!!");
        } else {

            //check files in table for encryption
            for (int i = 0; i < numOfRows; i++) {
                if (jTable1.getValueAt(i, 3) == "Not Encrypted") {
                    try {

                        String filename = (String) jTable1.getValueAt(i, 0);
                        String filepath = (String) jTable1.getValueAt(i, 2);

                        File file1 = new File(filepath);
                        boolean isDerectory = file1.isDirectory();

                        // check whether selcted item is a directory
                        if (isDerectory) {
                            //System.out.println("Directory found");
                            File folder = new File(filepath);
                            File[] listOfFiles = folder.listFiles();
                            asize = listOfFiles.length;

                            if (asize == 0) {
                                jTable1.setValueAt("Folder is empty", i, 3);
                            }
                            for (File file : listOfFiles) {

                                if (file.isFile()) {
                                    count++;
                                    String fileInFolderName = file.getName();
                                    //System.out.println(file.getName());
                                    //System.out.println("*");

                                    int lastDot = fileInFolderName.lastIndexOf('.');
                                    System.out.println("**");

                                    //create new folder to save encrypted files
                                    String folderPath = savepath + "\\" + filename + "_Encrypted";
                                    File theDir = new File(folderPath);
                                    System.out.println(folderPath);

                                    // if the directory does not exist, create it
                                    if (!theDir.exists()) {
                                        System.out.println("creating directory: " + theDir.getName());
                                        boolean result = false;

                                        try {
                                            theDir.mkdir();
                                            result = true;
                                        } catch (SecurityException se) {
                                            System.out.println("Exception occur in folder creation in encryption process");
                                        }
                                        if (result) {
                                            System.out.println("DIR created");
                                        }
                                    }
                                    //set up file names and files paths for save them after encryption

                                    String SaveFileName = savepath + "\\" + filename + "_Encrypted\\" + fileInFolderName.substring(0, lastDot) + "_Encrypted" + fileInFolderName.substring(lastDot);

                                    //System.out.println(SaveFileName);
                                    //File writting, reading and encryption process
                                    FileInputStream file2 = new FileInputStream(file.getAbsolutePath());

                                    FileOutputStream outStream = new FileOutputStream(SaveFileName);

                                    byte k[] = KEY.getBytes();

                                    SecretKeySpec key = new SecretKeySpec(k, "DES");

                                    Cipher enc = Cipher.getInstance("DES");

                                    enc.init(Cipher.ENCRYPT_MODE, key);

                                    CipherOutputStream cos = new CipherOutputStream(outStream, enc);

                                    byte[] buf = new byte[1024];

                                    int read;

                                    while ((read = file2.read(buf)) != -1) {
                                        cos.write(buf, 0, read);
                                    }
                                    file2.close();
                                    outStream.flush();
                                    cos.close();

                                    jTable1.setValueAt("Encrypted", i, 3);
                                } else if (count == 0) {
                                    jTable1.setValueAt("No files detected inside the folder", i, 3);
                                }
                            }
                        } else {
                            try {
                                int lastDot = filename.lastIndexOf('.');
                                String SaveFileName = savepath + "\\" + filename.substring(0, lastDot) + "_Encrypted" + filename.substring(lastDot);
                                //System.out.println(SaveFileName);

                                FileInputStream file = new FileInputStream((String) jTable1.getValueAt(i, 2));
                                FileOutputStream outStream = new FileOutputStream(SaveFileName);
                                System.out.println("1");

                                byte k1[] = KEY.getBytes();
                                System.out.println(k1.length);

                                SecretKeySpec skey = new SecretKeySpec(k1, "DES");

                                Cipher enc = Cipher.getInstance("DES");

                                enc.init(Cipher.ENCRYPT_MODE, skey);

                                CipherOutputStream cos = new CipherOutputStream(outStream, enc);

                                byte[] buf = new byte[1024];
                                int read;

                                while ((read = file.read(buf)) != -1) {
                                    cos.write(buf, 0, read);
                                }
                                file.close();
                                outStream.flush();
                                cos.close();

                                jTable1.setValueAt("Encrypted", i, 3);
                            } catch (NoSuchAlgorithmException noSuchAlgo) {
                                JOptionPane.showMessageDialog(null, "NoSuchAlgorithmException noSuchAlgo");
                            } catch (NoSuchPaddingException noSuchPad) {
                                JOptionPane.showMessageDialog(null, "NoSuchPaddingException noSuchPad");
                            } catch (InvalidKeyException invalidKey) {
                                JOptionPane.showMessageDialog(null, "InvalidKeyException invalidKey");
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error");
                            }

                        }

                    } catch (Exception e) {

                        JOptionPane.showMessageDialog(null, "Encryption failed");
                    }

                }

            }
        }
    }//GEN-LAST:event_Button_EncryptActionPerformed

    private void Button_DecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_DecryptActionPerformed

        // Decryption process
        int numOfRows = jTable1.getRowCount();
        if(numOfRows == 0){
            JOptionPane.showMessageDialog(null, "Please add 1 or more files to decrypt !!!");
        }
        else if (pass3.equals("")) {
            JOptionPane.showMessageDialog(null, "Enter Decryption key..");
            decryptKey.setEnabled(true);
        } else {
            DKey = pass3.replace("*", "");
            System.out.println(DKey);
            for (int i = 0; i < numOfRows; i++) {
                if (jTable1.getValueAt(i, 3) == "Encrypted") {
                    try {

                        //encrypted folder name
                        String filename = (String) jTable1.getValueAt(i, 0);
                        String filepath = (String) jTable1.getValueAt(i, 2);

                        File file1 = new File(filepath);
                        boolean isDerectory = file1.isDirectory();

                        System.out.println("encrypted folder name->" + filename);
                        System.out.println("encrypted folder path->" + filepath);

                        if (isDerectory) {
                            System.out.println("Directory found");
                            File folder = new File(filepath);
                            File[] listOfFiles = folder.listFiles();
                            asize = listOfFiles.length;

                            if (asize == 0) {
                                jTable1.setValueAt("Folder is empty", i, 3);
                            }
                            for (File file : listOfFiles) {

                                if (file.isFile()) {
                                    count++;
                                    String fileInFolderName = file.getName();
                                    System.out.println("Encrypted file name in folder->" + fileInFolderName);
                                    System.out.println("*");

                                    int lastDot = fileInFolderName.lastIndexOf('.');
                                    String newFolderName = filename.substring(0, filename.length() - 10);
                                    //System.out.println(newFolderName);

                                    //Folder creation
                                    String folderPath = savepath + "\\" + newFolderName + "_De-crypted";
                                    System.out.println("New folder path ->" + folderPath);
                                    File theDir = new File(folderPath);
                                    //System.out.println(folderPath);
                                    // if the directory does not exist, create it
                                    if (!theDir.exists()) {
                                        System.out.println("creating directory: " + theDir.getName());
                                        boolean result = false;

                                        try {
                                            theDir.mkdir();
                                            result = true;
                                        } catch (SecurityException se) {
                                            System.out.println("Exception occur in folder creation in decryption process");
                                        }
                                        if (result) {
                                            System.out.println("DIR created");
                                        }
                                    }

                                    String SaveFileName = folderPath + "\\" + fileInFolderName.substring(0, fileInFolderName.length() - 13) + "_De-crypted" + fileInFolderName.substring(lastDot);

                                    //System.out.println("File save name -> "+SaveFileName);
                                    FileInputStream file2 = new FileInputStream(file.getAbsolutePath());

                                    FileOutputStream outStream = new FileOutputStream(SaveFileName);

                                    byte k[] = DKey.getBytes();

                                    SecretKeySpec key = new SecretKeySpec(k, "DES");

                                    Cipher enc = Cipher.getInstance("DES");

                                    enc.init(Cipher.DECRYPT_MODE, key);

                                    CipherOutputStream cos = new CipherOutputStream(outStream, enc);

                                    byte[] buf = new byte[1024];

                                    int read;

                                    while ((read = file2.read(buf)) != -1) {
                                        cos.write(buf, 0, read);
                                    }
                                    file2.close();
                                    outStream.flush();
                                    cos.close();

                                    jTable1.setValueAt("De-crypted", i, 3);
                                } else if (count == 0) {
                                    jTable1.setValueAt("No files detected inside the folder", i, 3);
                                }
                            }
                        } else {
                            try {
                                int lastDot = filename.lastIndexOf('.');
                                String SaveFileName = savepath + "\\" + filename.substring(0, lastDot) + "_Decrypted" + filename.substring(lastDot);
                                //System.out.println(SaveFileName);

                                FileInputStream file = new FileInputStream((String) jTable1.getValueAt(i, 2));
                                FileOutputStream outStream = new FileOutputStream(SaveFileName);

                                byte k1[] = DKey.getBytes();
                                System.out.println(k1.length);

                                SecretKeySpec skey = new SecretKeySpec(k1, "DES");

                                Cipher enc = Cipher.getInstance("DES");

                                enc.init(Cipher.DECRYPT_MODE, skey);

                                CipherOutputStream cos = new CipherOutputStream(outStream, enc);

                                byte[] buf = new byte[1024];
                                int read;

                                while ((read = file.read(buf)) != -1) {
                                    cos.write(buf, 0, read);
                                }
                                file.close();
                                outStream.flush();
                                cos.close();

                                jTable1.setValueAt("De-crypted", i, 3);
                            } catch (NoSuchAlgorithmException noSuchAlgo) {
                                JOptionPane.showMessageDialog(null, "NoSuchAlgorithmException noSuchAlgo");
                            } catch (NoSuchPaddingException noSuchPad) {
                                JOptionPane.showMessageDialog(null, "NoSuchPaddingException noSuchPad");
                            } catch (InvalidKeyException invalidKey) {
                                JOptionPane.showMessageDialog(null, "InvalidKeyException invalidKey");
                            } catch (Exception e) {
                                JOptionPane.showMessageDialog(null, "Error");
                            }

                        }

                    } catch (Exception e) {

                        JOptionPane.showMessageDialog(null, "Encryption failed");
                    }

                }

            }

        }
    }//GEN-LAST:event_Button_DecryptActionPerformed

    private void Button_KeyManagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_KeyManagActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser savefolder = new JFileChooser();

            savefolder.setDialogTitle(Choosertitle);
            savefolder.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            savefolder.setAcceptAllFileFilterUsed(false);

            if (savefolder.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File savelocation = savefolder.getSelectedFile();
                keysavepath = savelocation.getAbsolutePath();
                String foldername = savelocation.getName();
                System.out.println(keysavepath);
                JOptionPane.showMessageDialog(null, "Save location set to : " + keysavepath);
            } else {
                JOptionPane.showMessageDialog(null, "Save location not set. ");
                System.out.println("Save location not set. ");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Fail to set save location. ");
            System.out.println("Fail to set save location. ");
        }

    }//GEN-LAST:event_Button_KeyManagActionPerformed

    private void Pass_1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Pass_1KeyReleased
        // TODO add your handling code here:

        try {
            if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                count1 = count1 - 1;

                pass1 = pass1.substring(0, pass1.length() - 1);
                pass1 = pass1.replaceAll("*", pass1);
                System.out.println(pass1);
            } else {
                pass1 += Pass_1.getText();
                if (count1 < 8) {
                    switch (count1) {
                        case 1:
                            Pass_1.setText("*");
                            break;
                        case 2:
                            Pass_1.setText("**");
                            break;
                        case 3:
                            Pass_1.setText("***");
                            break;
                        case 4:
                            Pass_1.setText("****");
                            break;
                        case 5:
                            Pass_1.setText("*****");
                            break;
                        case 6:
                            Pass_1.setText("******");
                            break;
                        case 7:
                            Pass_1.setText("*******");
                            break;
                        case 8:
                            Pass_1.setText("********");
                            break;

                    }

                } else {
                    Pass_1.setText("********");
                    Pass_1.setEnabled(false);
                }
                //System.out.print(count);
                count1++;
            }
        } catch (Exception e) {
            System.out.print("Exception");
        }

    }//GEN-LAST:event_Pass_1KeyReleased

    private void Pass_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Pass_2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Pass_2ActionPerformed

    private void Pass_2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Pass_2KeyReleased
        // TODO add your handling code here:
        try {
            if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                count2 = count2 - 1;

                pass2 = pass2.substring(0, pass2.length() - 1);
                pass2 = pass2.replaceAll("*", pass2);
                System.out.println(pass2);
            } else {
                pass2 += Pass_2.getText();
                if (count2 < 8) {
                    switch (count2) {
                        case 1:
                            Pass_2.setText("*");
                            break;
                        case 2:
                            Pass_2.setText("**");
                            break;
                        case 3:
                            Pass_2.setText("***");
                            break;
                        case 4:
                            Pass_2.setText("****");
                            break;
                        case 5:
                            Pass_2.setText("*****");
                            break;
                        case 6:
                            Pass_2.setText("******");
                            break;
                        case 7:
                            Pass_2.setText("*******");
                            break;
                        case 8:
                            Pass_2.setText("********");
                            break;

                    }

                } else {
                    Pass_2.setText("********");
                    Pass_2.setEnabled(false);
                }
                //System.out.print(count);
                count2++;
            }
        } catch (Exception e) {
            System.out.print("Exception");
        }
    }//GEN-LAST:event_Pass_2KeyReleased

    private void Button_AddKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_AddKeyActionPerformed

        if (keysavepath.contentEquals("")) {
            JOptionPane.showMessageDialog(null, "Please set a save location for log file !!! log file will save your encryption key !!! Keep the key safe !!!");
        } else {
            System.out.println("*");
            String key1 = pass1.replace("*", "");
            System.out.println("key1->" + key1);

            String key2 = pass2.replace("*", "");
            System.out.println("key2->" + key2);

            if (key1.equals(key2)) {

                try {
                    KEY = key1;
                    System.out.println("KEY = " + KEY);
                    PrintWriter writter = new PrintWriter(keysavepath + "\\" + "log.txt");
                    writter.print("Encryption key : ");
                    writter.println(key1);
                    writter.close();
                    System.out.print("Key = " + key1);

                } catch (IOException e) {
                    // do something
                }
            } else {
                JOptionPane.showMessageDialog(null, "Keys not matching.Please enter again. ");
                pass1 = pass1.replaceAll("[a-z,0-9,*]", "");
                pass2 = pass2.replaceAll("[a-z,0-9,*]", "");

                Pass_1.setText("");
                Pass_1.setEnabled(true);
                Pass_2.setText("");
                Pass_2.setEnabled(true);
                count1 = 1;
                count2 = 1;
                key1 = "";
                key2 = "";

                System.out.println("after clear");
                System.out.println("key1->" + key1);
                System.out.println("key2->" + key2);
            }

        }
    }//GEN-LAST:event_Button_AddKeyActionPerformed

    private void decryptKeyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_decryptKeyKeyReleased
        // TODO add your handling code here:
        try {
            if (evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                count3 = count3 - 1;

                pass3 = pass3.substring(0, pass3.length() - 1);
                pass3 = pass3.replaceAll("*", pass3);
                System.out.println(pass3);
            } else {
                pass3 += decryptKey.getText();
                if (count3 < 8) {
                    switch (count3) {
                        case 1:
                            decryptKey.setText("*");
                            break;
                        case 2:
                            decryptKey.setText("**");
                            break;
                        case 3:
                            decryptKey.setText("***");
                            break;
                        case 4:
                            decryptKey.setText("****");
                            break;
                        case 5:
                            decryptKey.setText("*****");
                            break;
                        case 6:
                            decryptKey.setText("******");
                            break;
                        case 7:
                            decryptKey.setText("*******");
                            break;
                        case 8:
                            decryptKey.setText("********");
                            break;

                    }

                } else {
                    decryptKey.setText("********");
                    decryptKey.setEnabled(false);
                }
                //System.out.print(count);
                count3++;
            }
        } catch (Exception e) {
            System.out.print("Exception");
        }
    }//GEN-LAST:event_decryptKeyKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel App_Name;
    private javax.swing.JButton Button_AddKey;
    private javax.swing.JButton Button_Decrypt;
    private javax.swing.JButton Button_Encrypt;
    private javax.swing.JButton Button_Exit;
    private javax.swing.JButton Button_KeyManag;
    private javax.swing.JButton Button_Minimize;
    private javax.swing.JButton Button_OpenFile;
    private javax.swing.JButton Button_OpenFolder;
    private javax.swing.JButton Button_Save;
    private javax.swing.JPanel Home_Panel;
    private javax.swing.JTextField Pass_1;
    private javax.swing.JTextField Pass_2;
    private javax.swing.JTextField decryptKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
